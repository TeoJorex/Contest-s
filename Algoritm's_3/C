using System.Collections;
using System.Collections.Generic;
using System;
using System.Linq;
using System.Text;

namespace zadach
{
    class Program
    {
        static void Main()
        {
            var n = int.Parse(Console.ReadLine());
            Dictionary<int, TreeNode> nodes = new Dictionary<int, TreeNode>();
            TreeNode root = new TreeNode();
            root.ID = 0;
            //root.deep = 0;
            nodes.Add(0, root);

            //var deep_node = root;
            //var max_h = 0;
            StringBuilder sb = new StringBuilder();

            var line = Console.ReadLine().Split(" ");
            for (int i = 0; i < n - 1; i++)
            {
                var x = int.Parse(line[i]);

                root = new TreeNode();
                root.ID = i + 1;
                root.Parent = nodes[x];
                //root.deep = nodes[x].deep + 1;
                nodes[x].Children.Add(i + 1, root);
                nodes.Add(i + 1, root);
            }          
            n = int.Parse(Console.ReadLine());
            for(int i = 0; i < n; i++)
            {
                line = Console.ReadLine().Split(" ");
                int[] check_mas = new int[nodes.Count];
                var node = nodes[int.Parse(line[0])];
                check_mas[node.ID] = 1;
                while(node.Parent != null)
                {
                    node = node.Parent;
                    check_mas[node.ID] = 1;
                }
                node = nodes[int.Parse(line[1])];
                if(check_mas[node.ID] == 1)
                {
                    sb.AppendLine(node.ID.ToString());
                    continue;
                } 
                while(check_mas[node.Parent.ID] == 0)
                {
                    node = node.Parent;
                }
                sb.AppendLine(node.Parent.ID.ToString());
            }
            Console.WriteLine(sb);
        }
    }

    public class TreeNode
    {
        public int ID { get; set; }

        public TreeNode Parent { get; set; }

        //public int deep { get; set; }

        public Dictionary<int, TreeNode> Children = new Dictionary<int, TreeNode>();

        public TreeNode()
        {
            Parent = null;
        }
    }
}
