#include <iostream>
#include <vector>
#include <algorithm>

struct Task {

    int begin;

    int end;

    int cost;
};

int main()
{
    int n, cost;
    scanf("%d %d", &n, &cost);
    std::vector<Task> Tasks(n + 1);
    for (int i = 0; i < n; i++) {
        int start, tm;
        scanf("%d %d", &start, &tm);
        Tasks[i] = (Task{ start,start + tm,cost });
    }
    std::vector<int> x;
    for (Task& p : Tasks) {
        x.push_back(p.begin);
        x.push_back(p.end);
    }
    std::sort(x.begin(), x.end());
    x.erase(std::unique(x.begin(), x.end()), x.end());
    for (Task& p : Tasks) {
        p.begin = int(std::lower_bound(x.begin(), x.end(), p.begin) - x.begin());
        p.end = int(std::lower_bound(x.begin(), x.end(), p.end) - x.begin());
    }
    std::vector<std::vector<int>> startingAt(x.size());
    for (int i = 0; i < n; i++) {
        startingAt[Tasks[i].begin].push_back(i);
    }
    std::vector<long long> max_Sum(x.size(), 0);
    std::vector<int> TaskUsed(x.size(), -1);
    for (int t = 0; t < (int)x.size(); t++) {
        if (t > 0) {
            if (max_Sum[t] < max_Sum[t - 1]) {
                max_Sum[t] = max_Sum[t - 1];
                TaskUsed[t] = -1;
            }
        }
        for (int pid : startingAt[t]) {
            Task& p = Tasks[pid];
            if (max_Sum[p.end] < max_Sum[p.begin] + p.cost) {
                max_Sum[p.end] = max_Sum[p.begin] + p.cost;
                TaskUsed[p.end] = pid;
            }
        }
    }
    printf("%lld\n", max_Sum.back());
    std::vector<int> ans;
    int t = (int)x.size() - 1;
    while (t > 0) {
        if (TaskUsed[t] == -1) {
            t--;
        }
        else {
            int pid = TaskUsed[t];
            ans.push_back(pid);
            t = Tasks[pid].begin;
        }
    }
    std::reverse(ans.begin(), ans.end());
    printf("%d\n", (int)ans.size());
    for (int i = 0; i < (int)ans.size(); i++) {
        if (i > 0) {
            printf(" ");
        }
        printf("%d", ans[i] + 1);
    }
    return 0;
}
