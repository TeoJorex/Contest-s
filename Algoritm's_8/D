using System;
using System.Collections.Generic;
using System.Text;

class Program
{
    static void Main()
    {
        var line = Console.ReadLine().Split(" ");
        var n = int.Parse(line[0]);
        var m = int.Parse(line[1]);
        line = Console.ReadLine().Split(" ");
        var arr = new long[n];
        for (int i = 0; i < n; i++)
        {
            arr[i] = long.Parse(line[i]);
        }
        SegmentTree tree = new SegmentTree(arr);
        List<long> list = new List<long>();
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < m; i++)
        {
            var ln = Console.ReadLine().Split(" ");
            if (ln[0] == "1")
            {
                var index = int.Parse(ln[1]);
                var new_value = int.Parse(ln[2]);
                tree.Update(index, new_value, 1, 0, n);
            }
            else
            {
                tree.index = -1;
                tree.min = long.MaxValue;
                tree.k = long.Parse(ln[1]);
                var left = int.Parse(ln[2]);
                tree.Min(left, 1, 0, n);
                sb.AppendLine(tree.index.ToString());
            }
        }
        Console.WriteLine(sb);
    }

    class SegmentTree
    {
        public long[] arr;
        public long[] tree;
        public long index;
        public long min;
        public long k;


        public SegmentTree(long[] arr)
        {
            this.arr = arr;
            tree = new long[4 * arr.Length];
            for (int i = 0; i < tree.Length; i++)
            {
                tree[i] = long.MaxValue;
            }
            Build(1, 0, arr.Length);
        }

        private void Build(int vertex, int left, int right)
        {
            if (left == right - 1)
            {
                tree[vertex] = arr[left];
                return;
            }
            else
            {
                var mid = (left + right) / 2;
                Build(vertex * 2, left, mid);
                Build(vertex * 2 + 1, mid, right);
            }

            if (tree[vertex * 2] == tree[vertex * 2 + 1])
            {
                tree[vertex] = tree[vertex * 2];
            }
            else
            {
                if (tree[vertex * 2] > tree[vertex * 2 + 1])
                {
                    tree[vertex] = tree[vertex * 2];
                }
                else
                {
                    tree[vertex] = tree[vertex * 2 + 1];
                }
            }
        }

        public void Update(int index, int new_value, int vertex, int left, int right)
        {
            if (left == right - 1 && index == left)
            {
                tree[vertex] = new_value;
                return;
            }
            else
            {
                var mid = (left + right) / 2;
                if (index < mid)
                {
                    Update(index, new_value, vertex * 2, left, mid);
                }
                else
                {
                    Update(index, new_value, vertex * 2 + 1, mid, right);
                }
            }

            if (tree[vertex * 2] == tree[vertex * 2 + 1])
            {
                tree[vertex] = tree[vertex * 2];
            }
            else
            {
                if (tree[vertex * 2] > tree[vertex * 2 + 1])
                {
                    tree[vertex] = tree[vertex * 2];
                }
                else
                {
                    tree[vertex] = tree[vertex * 2 + 1];
                }
            }
        }     

        public void Min(int index_left,int vertex,int left,int right)
        {
            if(left == right - 1)
            {
                if(tree[vertex] >= k && (index == -1 || vertex < index))
                {
                    index = left;
                }
                return;
            }
            else
            {
                var mid = (left + right) / 2;
                if(index_left <= mid-1 && tree[vertex*2] >= k)
                {
                    Min(index_left, vertex * 2, left, mid);
                }
                if(index_left <= right-1 && tree[vertex*2 + 1] >= k && index == -1)
                {
                    Min(index_left, vertex * 2 + 1, mid, right);
                } 
            }

        }
    }
}
